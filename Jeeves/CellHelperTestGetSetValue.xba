<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="CellHelperTestGetSetValue" script:language="StarBasic">REM  *****  BASIC  *****
Option Compatible
Option ClassModule
Option Explicit

Private targetRow as Integer
Private testsSucceeded as Integer
Private failMessage as String
Private failInfo as String
Private helper as Object

Public TestName as String

&apos;CONSTRUCTOR
Public Sub Class_Initialize
	testsSucceeded = 0
	failInfo = &quot;&quot;
	failMessage = &quot;&quot;
End Sub

Public Sub Init(row as Integer)
	targetRow = row
	TestName = ReadTestName(targetRow)
End Sub

Private Sub Success
	testsSucceeded = testsSucceeded + 1
End Sub

Private Sub Fail(info, msg as String)
	failInfo = info
	failMessage = msg
End Sub

Public Function HasFailed as Boolean
	HasFailed = failMessage &lt;&gt; &quot;&quot;
End Function

Private Sub WriteResult
	WriteTestResult(targetRow, testsSucceeded, failInfo, failMessage)
End Sub

&apos;Implement RunTests, but drop everything below this line

Private Const testValue = &quot;Test&quot;
Private Const valuesColumn = 5
Private Const nrOfValues = 6

Sub RunTests(cellHelper as Object)
	helper = cellHelper
	
	AssertIsValueSet(1)
	AssertIsValueSet(1234)
	AssertIsValueSet(&quot;Test&quot;)
	
	AssertIsValueNotSet(&quot;&quot;)
	
	AssertText(1, &quot;Test&quot;)
	AssertNumber(2, 42)
	AssertDate(3, &quot;29.10.1983&quot;)
	AssertMoney(4, 66.6)
	AssertBool(5, True)
	AssertBool(6, False)
	
	WriteResult()
End Sub

Sub AssertIsValueSet(value as String)
	AssertValueSet(value, True)
End Sub

Sub AssertIsValueNotSet(value as String)
	AssertValueSet(value, False)
End Sub

Sub AssertValueSet(value as String, expectedResult as Boolean)
	If Not HasFailed Then
		Dim actualResult as Boolean

		actualResult = IsValueSet(value)

		Success()
		If expectedResult &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded, &quot;&quot;+value+&quot; was not &quot;+expectedResult)
		End If
	End If
End Sub


Sub AssertText(row as Integer, value as String)
	If Not HasFailed Then
		Dim actualResult as String

		actualResult = helper.GetText(valuesColumn, row)

		Success()
		If value &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded+&quot; (&quot;+valuesColumn+&quot; / &quot;+row+&quot;)&quot;, &quot;&quot;+actualResult+&quot; was not &quot;+value)
		End If
		
		row = row + nrOfValues
		helper.SetText(valuesColumn, row, value)
		actualResult = helper.GetText(valuesColumn, row)

		Success()
		If value &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded+&quot; (&quot;+valuesColumn+&quot; / &quot;+row+&quot;)&quot;, &quot;&quot;+actualResult+&quot; was not &quot;+value)
		Else
			helper.ClearCell(valuesColumn, row)
			AssertIsValueNotSet(helper.GetText(valuesColumn, row))
		End If
	End If
End Sub

Sub AssertNumber(row as Integer, value as Integer)
	If Not HasFailed Then
		Dim actualResult as Integer

		actualResult = helper.GetNumber(valuesColumn, row)

		Success()
		If value &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded+&quot; (&quot;+valuesColumn+&quot; / &quot;+row+&quot;)&quot;, &quot;&quot;+actualResult+&quot; was not &quot;+value)
		End If
		
		row = row + nrOfValues
		helper.SetNumber(valuesColumn, row, value)
		actualResult = helper.GetNumber(valuesColumn, row)

		Success()
		If value &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded+&quot; (&quot;+valuesColumn+&quot; / &quot;+row+&quot;)&quot;, &quot;&quot;+actualResult+&quot; was not &quot;+value)
		Else
			helper.ClearCell(valuesColumn, row)
			AssertIsValueNotSet(helper.GetText(valuesColumn, row))
		End If
	End If
End Sub

Sub AssertDate(row as Integer, value as Date)
	If Not HasFailed Then
		Dim actualResult as Date

		actualResult = helper.GetDate(valuesColumn, row)

		Success()
		If value &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded+&quot; (&quot;+valuesColumn+&quot; / &quot;+row+&quot;)&quot;, &quot;&quot;+actualResult+&quot; was not &quot;+value)
		End If
		
		row = row + nrOfValues
		helper.SetDate(valuesColumn, row, value)
		actualResult = helper.GetDate(valuesColumn, row)

		Success()
		If value &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded+&quot; (&quot;+valuesColumn+&quot; / &quot;+row+&quot;)&quot;, &quot;&quot;+actualResult+&quot; was not &quot;+value)
		Else
			helper.ClearCell(valuesColumn, row)
			AssertIsValueNotSet(helper.GetText(valuesColumn, row))
		End If
	End If
End Sub

Sub AssertMoney(row as Integer, value as Currency)
	If Not HasFailed Then
		Dim actualResult as Currency

		actualResult = helper.GetMoney(valuesColumn, row)

		Success()
		If value &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded+&quot; (&quot;+valuesColumn+&quot; / &quot;+row+&quot;)&quot;, &quot;&quot;+actualResult+&quot; was not &quot;+value)
		End If
		
		row = row + nrOfValues
		helper.SetMoney(valuesColumn, row, value)
		actualResult = helper.GetMoney(valuesColumn, row)

		Success()
		If value &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded+&quot; (&quot;+valuesColumn+&quot; / &quot;+row+&quot;)&quot;, &quot;&quot;+actualResult+&quot; was not &quot;+value)
		Else
			helper.ClearCell(valuesColumn, row)
			AssertIsValueNotSet(helper.GetText(valuesColumn, row))
		End If
	End If
End Sub

Sub AssertBool(row as Integer, value as Boolean)
	If Not HasFailed Then
		Dim actualResult as Boolean

		actualResult = helper.GetBool(valuesColumn, row)

		Success()
		If value &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded+&quot; (&quot;+valuesColumn+&quot; / &quot;+row+&quot;)&quot;, &quot;&quot;+actualResult+&quot; was not &quot;+value)
		End If
		
		row = row + nrOfValues
		helper.SetBool(valuesColumn, row, value)
		actualResult = helper.GetBool(valuesColumn, row)

		Success()
		If value &lt;&gt; actualResult Then
			Fail(TestName+&quot; &quot;+testsSucceeded+&quot; (&quot;+valuesColumn+&quot; / &quot;+row+&quot;)&quot;, &quot;&quot;+actualResult+&quot; was not &quot;+value)
		Else
			helper.ClearCell(valuesColumn, row)
			AssertIsValueNotSet(helper.GetText(valuesColumn, row))
		End If
	End If
End Sub

</script:module>