<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="JeevesTestSuite" script:language="StarBasic">REM  *****  BASIC  *****

Public Const titleSheetTestSuite = &quot;TestSuite&quot;
Public Const resultColumnCaptions = 1
Public Const resultColumnAllTests = 2
Public Const resultRowHeight = 5
Public Const resultRowAllTests = 2
Public Const resultRowIntegrationTests 		= resultRowAllTests + resultRowHeight
Public Const resultRowFindRowTests 		= resultRowAllTests + 2*resultRowHeight
Public Const resultRowGetSetValueTests 	= resultRowAllTests + 3*resultRowHeight
Public Const resultRowCalcReaderTests 	= resultRowAllTests + 4*resultRowHeight
Public Const resultRowCalcWriterTests 	= resultRowAllTests + 5*resultRowHeight
Public Const resultRowLastTests 		= resultRowAllTests + 5*resultRowHeight

Private allTestsSucceeded, testsFailed as Integer
Private failedInfo as String
Private currentTest as Object
Private helper as Object

&apos;TESTS: All
Sub TestAll
	&apos;All Tests -&gt; Run
	Init()
	ClearAllTestResults()
	
	TestIntegration()
	TestFindRow()
	TestGetSetValue()
	TestCalcReader()
	TestCalcWriter()
	
	WriteAllResult()
End Sub

Sub WriteAllResult
	Dim msg as String
	If testsFailed &gt; 0 Then
		msg = &quot;&quot;+testsFailed
	Else
		msg = &quot;&quot;
	End If
	
	WriteTestResult(resultRowAllTests, allTestsSucceeded, msg, failedInfo)
End Sub

Sub Init
	SetTestMode(True)
	helper = SheetHelper(titleSheetTestSuite)	
End Sub

Sub Reset
	allTestsSucceeded = 0
	testsFailed = 0
	failedInfo = &quot;&quot;
End Sub

Sub ClearAllResult
	ClearTestResults(resultRowAllTests)
End Sub

Sub ClearAllTestResults
	&apos;All Tests -&gt; Clear
	Init()
	Reset()
	Dim I as Integer
	For I = resultRowAllTests To resultRowLastTests Step resultRowHeight
		ClearTestResults(I)
	Next I
End Sub

&apos;TESTS: Integration
Sub TestIntegration
	&apos;Integration -&gt; Run
	Init()
	
	currentTest = New TestIntegration
	RunCurrentTest(resultRowIntegrationTests)
End Sub

Sub ClearIntegrationResults
	&apos;Integration -&gt; Clear
	Init()
	Reset()
	ClearTestResults(resultRowIntegrationTests)
End Sub

&apos;TESTS: FindRow
Sub TestFindRow
	&apos;FindRow -&gt; Run
	Init()
	
	currentTest = New TestFindRow
	RunCurrentTest(resultRowFindRowTests)
End Sub

Sub ClearFindRowResults
	&apos;FindRow -&gt; Clear
	Init()
	Reset()
	ClearTestResults(resultRowFindRowTests)
End Sub

&apos;TESTS: GetSetValue
Sub TestGetSetValue
	&apos;GetSetValue -&gt; Run
	Init()
	currentTest = New TestGetSetValue
	RunCurrentTest(resultRowGetSetValueTests)
End Sub

Sub ClearGetSetValueResults
	&apos;GetSetValue -&gt; Clear
	Init()
	Reset()
	ClearTestResults(resultRowGetSetValueTests)
End Sub

&apos;TESTS: CalcReader
Sub TestCalcReader
	&apos;CalcReader -&gt; Run
	Init()
	currentTest = New TestCalcReader
	RunCurrentTest(resultRowCalcReaderTests)
End Sub

Sub ClearCalcReaderResults
	&apos;CalcReader -&gt; Clear
	Init()
	Reset()
	ClearTestResults(resultRowCalcReaderTests)
End Sub

&apos;TESTS: CalcWriter
Sub TestCalcWriter
	&apos;CalcWriter -&gt; Run
	Init()
	currentTest = New TestCalcWriter
	RunCurrentTest(resultRowCalcWriterTests)
End Sub

Sub ClearCalcWriterResults
	&apos;CalcWriter -&gt; Clear
	Init()
	Reset()
	ClearTestResults(resultRowCalcWriterTests)
End Sub

&apos;METHODS

Sub RunCurrentTest(targetRow)
	If helper.GetBool(resultColumnAllTests, targetRow-1) Then
		ClearTestResults(resultRowAllTests)
		ClearTestResults(targetRow)
		
		currentTest.Init(targetRow)
		currentTest.RunTests(helper)
		
		UpdateResultInfo()
	Else
		helper.SetText(resultColumnAllTests, targetRow, &quot;SKIPPED&quot;)
	End If
End Sub

Sub UpdateResultInfo
	If currentTest.HasFailed Then
		testsFailed = testsFailed + 1
		If failedInfo &lt;&gt; &quot;&quot; Then
			failedInfo = failedInfo + &quot;, &quot;+currentTest.TestName
		Else
			failedInfo = currentTest.TestName
		End If
	End If
End Sub

Sub WriteTestResult(row as Integer, nrSucceeded as Integer, info, message as String)
	Dim result as String
	If info &lt;&gt; &quot;&quot; OR message &lt;&gt; &quot;&quot; Then
		result = &quot;FAILURE&quot;
	Else
		result = &quot;SUCCESS&quot;
	End If
	allTestsSucceeded = allTestsSucceeded + nrSucceeded
	
	helper.SetText(resultColumnAllTests, row, result)
	helper.SetNumber(resultColumnAllTests, row+1, nrSucceeded)
	helper.SetText(resultColumnAllTests, row+2, info)
	helper.SetText(resultColumnAllTests, row+3, message)
End Sub

Sub ClearTestResults(row as Integer)
	Dim I 
	For I = 0 To 3
  		helper.ClearCell(resultColumnAllTests, row+I)
	Next I
End Sub

Function ReadTestName(row as Integer) as String
	ReadTestName = helper.GetText(resultColumnCaptions, row)
End Function

</script:module>