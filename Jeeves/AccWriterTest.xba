<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="AccWriterTest" script:language="StarBasic" script:moduleType="normal">REM  *****  BASIC  *****
Option Compatible
Option ClassModule
Option Explicit

Private targetRow as Integer
Private testsSucceeded as Integer
Private failMessage as String
Private failInfo as String
Private helper as Object

Public TestName as String

&apos;CONSTRUCTOR
Public Sub Class_Initialize
	testsSucceeded = 0
	failInfo = &quot;&quot;
	failMessage = &quot;&quot;
End Sub

Public Sub Init(row as Integer)
	targetRow = row
	TestName = ReadTestName(targetRow)
End Sub

Private Sub Success
	testsSucceeded = testsSucceeded + 1
End Sub

Private Sub Fail(info, msg as String)
	failInfo = info
	failMessage = msg
End Sub

Public Function HasFailed as Boolean
	HasFailed = failInfo &lt;&gt; &quot;&quot; OR failMessage &lt;&gt; &quot;&quot;
End Function

Private Sub WriteResult
	WriteTestResult(targetRow, testsSucceeded, failInfo, failMessage)
End Sub

Sub AssertText(info, expected, actual as String)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertNumber(info as String, expected, actual as Integer)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertBool(info as String, expected, actual as Boolean)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertDate(info as String, expected, actual as Date)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertMoney(info as String, expected, actual as Currency)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, &quot;&quot;+expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertCell(helper as Object, info, expected as String, column, row as Integer)
	Dim actual as String
	actual = helper.GetText(column, row)
	assertText(info, expected, actual)
End Sub

Sub AssertRange(helper as Object, info, expected, range as String)
	Dim actual as String
	actual = helper.GetRangeText(range)
	assertText(info, expected, actual)
End Sub

Public Const testPathBase = &quot;/home/ledovy/git/jeeves/&quot;
Public Const testPathTemplate = &quot;test/templates/&quot;
Public Const testPathTarget = &quot;test/results/&quot;
&apos;Implement RunTests, but drop everything below this line

Public Const testFileCalc = &quot;abrechnung-calc.ods&quot;
Public Const testOriginalCalc = testPathBase+testPathTemplate+testFileCalc
Public Const testDocCalc = testPathBase+testPathTarget+&quot;abrechnung-acc-writer.ods&quot;
Public Const testFileAcc = &quot;buchhaltung.ods&quot;
Public Const testOriginalAcc = testPathBase+testPathTemplate+testFileAcc
Public Const testDocAcc = testPathBase+testPathTarget+&quot;buchhaltung-acc-writer.ods&quot;
Public Const testCockpit = testPathBase+testPathTemplate+&quot;jeeves-cockpit.ods&quot;

Dim writer as Object
Dim data As Object
Dim accHelper as Object
Dim model as Object

Sub RunTests(cellHelper as Object)
	PrepareTest()
	
	Dim reader as Object
	reader = new CalcReader
	reader.Init(data)
	reader.ReadCalculation()
	model = reader.model
	
	writer = new AccWriter
	writer.Init(data)
	writer.WriteAccounting(model)
	
	AssertAccSheet()
	
	WriteResult()
	data.CloseDocs()
End Sub

Sub PrepareTest
	PrepareTestFile(testOriginalCalc, testDocCalc)
	PrepareTestFile(testOriginalAcc, testDocAcc)
	ReloadDataProvider
End Sub

Sub ReloadDataProvider
	data = new JeevesData
	data.OpenCalcPath(testDocCalc)
	data.OpenAccPath(testDocAcc)
	data.OpenCockpitPath(testCockpit)
End Sub

Sub AssertAccSheet
	accHelper = data.getAccHelper(&quot;Jahres√ºbersicht 2021&quot;)
	
	AssertCell(accHelper, &quot;Acc-Customer&quot;, &quot;Ledovy Inc&quot;, 0, 4)
	&apos;AssertAccRow(5, &quot;job&quot;, &quot;rechnung&quot;, &quot;betrag&quot;)
End Sub

Sub AssertAccRow(row as Integer, title, calc, money as String)

End Sub
</script:module>