<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="AccWriterTest" script:language="StarBasic" script:moduleType="normal">REM  *****  BASIC  *****
Option Compatible
Option ClassModule
Option Explicit

Private targetRow as Integer
Private testsSucceeded as Integer
Private failMessage as String
Private failInfo as String
Private helper as Object

Public TestName as String

&apos;CONSTRUCTOR
Public Sub Class_Initialize
	testsSucceeded = 0
	failInfo = &quot;&quot;
	failMessage = &quot;&quot;
End Sub

Public Sub Init(row as Integer)
	targetRow = row
	TestName = ReadTestName(targetRow)
End Sub

Private Sub Success
	testsSucceeded = testsSucceeded + 1
End Sub

Private Sub Fail(info, msg as String)
	failInfo = info
	failMessage = msg
End Sub

Public Function HasFailed as Boolean
	HasFailed = failInfo &lt;&gt; &quot;&quot; OR failMessage &lt;&gt; &quot;&quot;
End Function

Private Sub WriteResult
	WriteTestResult(targetRow, testsSucceeded, failInfo, failMessage)
End Sub

Sub AssertText(info, expected, actual as String)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertNumber(info as String, expected, actual as Integer)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertBool(info as String, expected, actual as Boolean)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertDate(info as String, expected, actual as Date)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertMoney(info as String, expected, actual as Currency)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, &quot;&quot;+expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertCell(helper as Object, info, expected as String, column, row as Integer)
	Dim actual as String
	actual = helper.GetText(column, row)
	assertText(info, expected, actual)
End Sub

Sub AssertRange(helper as Object, info, expected, range as String)
	Dim actual as String
	actual = helper.GetRangeText(range)
	assertText(info, expected, actual)
End Sub

Public Const testPathBase = &quot;/home/ledovy/git/jeeves/&quot;
Public Const testPathTemplate = &quot;test/templates/&quot;
Public Const testPathTarget = &quot;test/results/&quot;
&apos;Implement RunTests, but drop everything below this line

Public Const acmeOriginal = testPathBase+testPathTemplate+&quot;abrechnung-acme.ods&quot;
Public Const acmeDoc = testPathBase+testPathTarget+&quot;abrechnung-acc-acme.ods&quot;

Public Const ledovyOriginal = testPathBase+testPathTemplate+&quot;abrechnung-ledovy.ods&quot;
Public Const ledovyOriginal2 = testPathBase+testPathTemplate+&quot;abrechnung-ledovy2.ods&quot;
Public Const ledovyDoc = testPathBase+testPathTarget+&quot;abrechnung-acc-ledovy.ods&quot;
Public Const ledovyDoc2 = testPathBase+testPathTarget+&quot;abrechnung-acc-ledovy2.ods&quot;

Public Const accOriginal = testPathBase+testPathTemplate+&quot;buchhaltung.ods&quot;
Public Const accDoc = testPathBase+testPathTarget+&quot;buchhaltung-acc-writer.ods&quot;

Public Const testCockpit = testPathBase+testPathTemplate+&quot;jeeves-cockpit.ods&quot;

Dim writer as Object
Dim data As Object
Dim accHelper as Object
Dim acmeHelper as Object
Dim ledovyHelper as Object
Dim model as Object
Dim today as String

Sub RunTests(cellHelper as Object)
	PrepareTest()
	
	AssertAccSheet()
	
	WriteResult()
	data.CloseDocs()
End Sub

Sub PrepareTest
	PrepareTestFile(acmeOriginal, acmeDoc)
	PrepareTestFile(ledovyOriginal, ledovyDoc)
	PrepareTestFile(accOriginal, accDoc)
	ReloadDataProvider
End Sub

Sub ReloadDataProvider
	data = new JeevesData
	data.OpenCockpitPath(testCockpit)
	data.OpenAccPath(accDoc)
End Sub

Sub ProcessAcc
	Dim reader as Object
	reader = new CalcReader
	reader.Init(data)
	reader.ReadCalculation()
	model = reader.model
	
	writer = new AccWriter
	writer.Init(data)
	writer.WriteAccounting(model)
End Sub

Sub AssertAccSheet
	data.OpenCalcPath(ledovyDoc)
	ProcessAcc()
	accHelper = data.getAccHelper(&quot;2021&quot;)
	&apos;acmeHelper = data.getAccHelper(&quot;ACME 2021&quot;)
	&apos;ledovyHelper = data.getAccHelper(&quot;Ledovy Inc 2021&quot;)
		
	AssertRange(accHelper, &quot;Acc0-Header&quot;, &quot;Mia Muster – Auflistung Abrechnungen 2021&quot;, &quot;A1&quot;)
	AssertCell(accHelper, &quot;Acc0-Ledovy&quot;, &quot;Ledovy Inc&quot;, accCustomerColumn, 5)
	AssertAccRow(accHelper, 6, &quot;Coding&quot;, DATE(), &quot;SFr. 1&apos;362.50&quot;, &quot;file://&quot;+ledovyDoc)
	AssertAccRow(accHelper, 7, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
	AssertAccRow(accHelper, 8, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
	AssertCell(accHelper, &quot;Acc0-Total&quot;, &quot;Total&quot;, accCustomerColumn, 9)
	AssertCell(accHelper, &quot;Acc0-Total&quot;, &quot;SFr. 1&apos;362.50&quot;, accCostColumn, 9)
		
	&apos;AssertRange(ledovyHelper, &quot;Acc0a-Header&quot;, &quot;Mia Muster – Auflistung Abrechnungen Ledovy Inc 2021&quot;, &quot;A1&quot;)
	&apos;AssertCell(ledovyHelper, &quot;Acc0a-Ledovy&quot;, &quot;Ledovy Inc&quot;, accCustomerColumn, 5)
	&apos;AssertAccRow(ledovyHelper, 6, &quot;Coding&quot;, DATE(), &quot;SFr. 1&apos;362.50&quot;, &quot;file://&quot;+ledovyDoc)
	&apos;AssertAccRow(ledovyHelper, 7, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
	&apos;AssertAccRow(ledovyHelper, 8, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
	&apos;AssertCell(ledovyHelper, &quot;Acc0a-Total&quot;, &quot;Total&quot;, accCustomerColumn, 9)
	&apos;AssertCell(ledovyHelper, &quot;Acc0a-Total&quot;, &quot;SFr. 1&apos;362.50&quot;, accCostColumn, 9)
	
	data.OpenCalcPath(acmeDoc)
	ProcessAcc()
		
	AssertRange(accHelper, &quot;Acc1-Header&quot;, &quot;Mia Muster – Auflistung Abrechnungen 2021&quot;, &quot;A1&quot;)
	AssertCell(accHelper, &quot;Acc1-Ledovy&quot;, &quot;Ledovy Inc&quot;, accCustomerColumn, 5)
	AssertAccRow(accHelper, 6, &quot;Coding&quot;, DATE(), &quot;SFr. 1&apos;362.50&quot;, &quot;file://&quot;+ledovyDoc)
	AssertAccRow(accHelper, 7, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
	AssertCell(accHelper, &quot;Acc1-ACME&quot;, &quot;ACME&quot;, accCustomerColumn, 8)
	AssertAccRow(accHelper, 9, &quot;Lieferung Rüebli&quot;, DATE(), &quot;SFr. 945.83&quot;, &quot;file://&quot;+acmeDoc)
	AssertAccRow(accHelper, 10, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
	AssertCell(accHelper, &quot;Acc1-Total&quot;, &quot;Total&quot;, accCustomerColumn, 12)
	AssertCell(accHelper, &quot;Acc1-Total&quot;, &quot;SFr. 2&apos;308.33&quot;, accCostColumn, 12)
	
	PrepareTestFile(ledovyOriginal2, ledovyDoc)
	data.OpenCalcPath(ledovyDoc)
	ProcessAcc()
	
	AssertRange(accHelper, &quot;Acc2-Header&quot;, &quot;Mia Muster – Auflistung Abrechnungen 2021&quot;, &quot;A1&quot;)
	AssertCell(accHelper, &quot;Acc2-Ledovy&quot;, &quot;Ledovy Inc&quot;, accCustomerColumn, 5)
	AssertAccRow(accHelper, 6, &quot;Coding2&quot;, DATE(), &quot;SFr. 1&apos;562.50&quot;, &quot;file://&quot;+ledovyDoc)
	AssertAccRow(accHelper, 7, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
	AssertCell(accHelper, &quot;Acc2-ACME&quot;, &quot;ACME&quot;, accCustomerColumn, 8)
	AssertAccRow(accHelper, 9, &quot;Lieferung Rüebli&quot;, DATE(), &quot;SFr. 945.83&quot;, &quot;file://&quot;+acmeDoc)
	AssertAccRow(accHelper, 10, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
	AssertCell(accHelper, &quot;Acc2-Total&quot;, &quot;Total&quot;, accCustomerColumn, 12)
	AssertCell(accHelper, &quot;Acc2-Total&quot;, &quot;SFr. 2&apos;508.33&quot;, accCostColumn, 12)
	
	PrepareTestFile(ledovyOriginal, ledovyDoc2)
	data.OpenCalcPath(ledovyDoc2)
	ProcessAcc()
	
	AssertRange(accHelper, &quot;Acc2-Header&quot;, &quot;Mia Muster – Auflistung Abrechnungen 2021&quot;, &quot;A1&quot;)
	AssertCell(accHelper, &quot;Acc2-Ledovy&quot;, &quot;Ledovy Inc&quot;, accCustomerColumn, 5)
	AssertAccRow(accHelper, 6, &quot;Coding2&quot;, DATE(), &quot;SFr. 1&apos;562.50&quot;, &quot;file://&quot;+ledovyDoc)
	AssertAccRow(accHelper, 7, &quot;Coding&quot;, DATE(), &quot;SFr. 1&apos;362.50&quot;, &quot;file://&quot;+ledovyDoc2)
	AssertAccRow(accHelper, 8, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
	AssertCell(accHelper, &quot;Acc2-ACME&quot;, &quot;ACME&quot;, accCustomerColumn, 9)
	AssertAccRow(accHelper, 10, &quot;Lieferung Rüebli&quot;, DATE(), &quot;SFr. 945.83&quot;, &quot;file://&quot;+acmeDoc)
	AssertAccRow(accHelper, 11, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
	AssertCell(accHelper, &quot;Acc2-Total&quot;, &quot;Total&quot;, accCustomerColumn, 13)
	AssertCell(accHelper, &quot;Acc2-Total&quot;, &quot;SFr. 3&apos;870.83&quot;, accCostColumn, 13)
End Sub

Sub AssertAccRow(helper as Object, row as Integer, title, calc, cost, file as String)
	AssertCell(helper, &quot;AccRow&quot;+row+&quot;-title&quot;, title, accTitleColumn, row)
	&apos;AssertCell(helper, &quot;AccRow&quot;+row+&quot;-time&quot;, time, accTimeColumn, row)
	AssertCell(helper, &quot;AccRow&quot;+row+&quot;-cost&quot;, cost, accCostColumn, row)
	AssertCell(helper, &quot;AccRow&quot;+row+&quot;-file&quot;, file, accFileColumn, row)
End Sub
</script:module>