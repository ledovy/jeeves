<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="ClassAccounting" script:language="StarBasic">REM  *****  BASIC  *****
Option Compatible
Option ClassModule
Option Explicit

&apos;CONSTANTS

&apos;ATTRIBUTES
Dim calcHelper, accHelper as Object
Dim config, masterData, contactData as Object
Dim calcTotalRow As Integer

&apos;CONSTRUCTOR
Public Sub Class_Initialize
	
End Sub

Public Sub Init(dataProvider as Object)
	dataProvider.InitAccountingData()
	calcHelper = dataProvider.calcHelper
	accHelper = dataProvider.accHelper
	accCustomerHelper = dataProvider.accCustomerHelper
	
	config = dataProvider.config
	masterData = dataProvider.masterData
	contactData = dataProvider.contactData
	&apos;TODO rename calcTotalRow
	calcTotalRow = calcHelper.FindRow(calcFactorColumn, calcStartRow, &quot;Total: &quot;, True)
End Sub


&apos;ACCOUNTING

Public Sub UpdateAccounting
	WriteCalculationContact()
	WriteCalculationToAccounting()
End Sub

Sub WriteCalculationContact
	calcHelper.SetRangeText(&quot;A5&quot;,  contactData.contactFirstName+&quot; &quot;+contactData.contactLastName)
	calcHelper.SetText(calcContactInfoColumn, calcTotalRow+calcBankPcOffset, &quot;PC: &quot;+contactData.bankPc)
	calcHelper.SetText(calcContactInfoColumn, calcTotalRow+calcBankIbanOffset, &quot;IBAN: &quot;+contactData.bankIban)
	calcHelper.SetText(calcContactInfoColumn, calcTotalRow+calcBankAddressOffset, &quot;Kontoinhaberin: &quot;+contactData.contactFirstName+&quot; &quot;+contactData.contactLastName+&quot;; &quot;+contactData.contactAddress)
	calcHelper.SetText(calcContactInfoColumn, calcTotalRow+calcFirstNameOffset, contactData.contactFirstName)
End Sub

Dim lastRow As Integer
Dim msg as String

Sub WriteCalculationToAccounting
	lastRow = accHelper.FindRow(accCustomerColumn, accStartRow, &quot;Total&quot;, True)
	
	Dim customerRow as Integer
	customerRow = GetCustomerRow(masterData.customerCompany)+1
	
	Dim entryRow as Integer
	entryRow = GetEntryRow(customerRow)
	
	&apos;TODO write customer-details
	&apos;TODO  -&gt; clear old entries, if calc already exists in acc
	&apos;TODO  -&gt; write entries for calc
	&apos;TODO  -&gt; write total-entry
	&apos;TODO create accRowEntry with ref to customer-details
	WriteAccRow(AccRowEntry(calcHelper, calcTotalRow, masterData), entryRow)
    accHelper.SortRange(accTimeColumn, accCustomerColumn, customerRow, accCostColumn, entryRow+1)
	accHelper.SetFormula(accCostColumn, lastRow, &quot;=SUM(D&quot;+(accStartRow+1)+&quot;:D&quot;+(lastRow)+&quot;)&quot;)
	
	accHelper.SaveDoc()
	accHelper.CloseDoc()
	Info(msg)
End Sub

Private Function GetEntryRow(row as Integer)
	Dim entryRow As Integer
	entryRow = accHelper.FindRow(accFileColumn, row, masterData.fileName, False)
	If entryRow &lt; 0 Then
		&apos;create new entry-row
		entryRow = accHelper.FindRow(accTitleColumn, row, &quot;&quot;, False)+1
		accHelper.InsertRows(entryRow, 1)
		lastRow = lastRow+1
		msg = &quot;Eintrag zur Buchhaltung hinzugef√ºgt&quot;
	Else
		msg = &quot;Eintrag in Buchhaltung aktualisiert&quot;
	End If
	GetEntryRow = entryRow
End Function

Private Function GetCustomerRow(company as String)
	Dim row as Integer
	row = accHelper.FindRow(accCustomerColumn, accStartRow, company, True)
	If row &lt; 0 Then
	&apos;if customer does not exist, create a new title
		row = lastRow-1
		accHelper.InsertRows(row-1, accCustomerSpacing)
		accHelper.SetText(accCustomerColumn, row, company)
		lastRow = lastRow+accCustomerSpacing
	End If
	GetCustomerRow = row
End Function

Private Sub WriteAccRow(entry as Object, row as Integer)
	&apos;write entry for calculation
	accHelper.SetText(accTitleColumn, row, entry.title)
	accHelper.SetDate(accTimeColumn, row, entry.time)
	accHelper.SetMoney(accCostColumn, row, entry.cost)
	accHelper.SetText(accFileColumn, row, entry.fileName)
End Sub
</script:module>