<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="ClassCalculation" script:language="StarBasic">REM  *****  BASIC  *****
Option Compatible
Option ClassModule
Option Explicit

&apos;ATTRIBUTES
Dim timeHelper, typeHelper, calcHelper, configHelper, accHelper as Object
Dim config, masterData, contactData, workTypes As Object
Dim currentTargetRow As Integer

&apos;CONSTRUCTOR
Public Sub Class_Initialize
	currentTargetRow = calcStartRow
End Sub

Public Sub Init(dataProvider as Object)
	dataProvider.InitCalculationData()
	timeHelper = dataProvider.timeHelper
	calcHelper = dataProvider.calcHelper
	
	config = dataProvider.config
	masterData = dataProvider.masterData
	workTypes = dataProvider.types
	currentTargetRow = calcStartRow
End Sub

&apos;CALCULATION

Public Sub CreateCalculation
	ShowGreetings()
	ClearOldEntries()
	ProcessEntries()
	AddCollapsedEntries()
	WriteSummary()
	calcHelper.SaveDoc()
End Sub

Public Sub ClearOldEntries
	Dim endRow, rows As Integer
	endRow = calcHelper.FindRow(calcFactorColumn, calcStartRow, &quot;Total: &quot;, True)
	rows = endRow-calcStartRow
	If rows &gt; 0 Then
		calcHelper.RemoveRows(calcStartRow, rows)
	End If
End Sub

Sub ProcessEntries
	Dim i As Integer
	i = timeFirstEntryRow
	Dim rowValue As String
	rowValue = timeHelper.GetText(timeDateColumn, i)
	Do While (&quot;&quot; &lt;&gt; rowValue) OR (i &lt; (timeFirstEntryRow+timeMaxEntries))
		Dim typeValue, collapsedValue, sumValue As String
		typeValue = timeHelper.GetText(timeTypeColumn, i)
		If workTypes.IsCollapsed(typeValue) Then
			sumValue = timeHelper.GetText(timeTimeColumn, i)
		Else
			sumValue = timeHelper.GetText(timeTimeRoundedColumn, i)
			AddRow(CalcRowEntry(timeHelper, i))
		End If
		workTypes.AddEffort(sumValue, typeValue)
		&apos; increment
		i = i+1
		rowValue = timeHelper.GetText(timeDateColumn, i)
	Loop
	If (i &gt; (timeFirstEntryRow+timeMaxEntries)) Then
		Info(&quot;Maximale Anzahl von &quot;+timeMaxEntries+&quot; Zeilen Ã¼berschritten: &quot;+(i-timeFirstEntryRow))
	End If
End Sub

Sub AddRow(entry As Object)
	If (entry.datum &lt;&gt; &quot;&quot;) OR (entry.title &lt;&gt; &quot;&quot;) OR (entry.time &lt;&gt; 0) OR (entry.cost &lt;&gt; 0) Then
		calcHelper.InsertRows(currentTargetRow, 1)
		WriteRow(currentTargetRow, entry)
		currentTargetRow = currentTargetRow + 1
	End If
End Sub

Sub WriteRow (rowIndex As Integer, entry as Object)
		calcHelper.SetText(calcDateColumn, rowIndex, entry.datum)
		calcHelper.SetText(calcNameColumn, rowIndex, entry.title)
		calcHelper.SetText(calcFactorColumn, rowIndex, entry.factor)
		Dim timeValue as Integer
		timeValue = entry.time
		calcHelper.SetFormula(calcTimeColumn, rowIndex, &quot;=&quot;+timeValue+&quot;/(60*24)&quot;)
		calcHelper.SetFormatTime(calcTimeColumn, rowIndex)
		calcHelper.SetMoney(calcCostColumn, rowIndex, entry.cost)
		&apos;calcHelper.SetFormatMoney(calcCostColumn, rowIndex)
End Sub

Sub AddCollapsedEntries
	Dim i As Integer
	For i = 0 To workTypes.TypesSize
		Dim typeValue As String
		typeValue = workTypes.Types(i)
		If workTypes.IsCollapsed(typeValue) Then
			Dim entry As Object
			entry = workTypes.GetWorkEntry(typeValue)
			entry.datum = GetRange(typeValue)
			If entry.cost &lt;&gt; 0 Then
				AddRow(entry)
			End If
		End If
	Next i
	calcHelper.SortRange(calcDateColumn, calcDateColumn, calcStartRow, calcCostColumn, currentTargetRow)
End Sub

Function GetRange(Optional category As String) As String
	&apos;TODO ClassCursor (x/y, inc/dec, copy/create)
	Dim currentX, currentY, firstX, firstY, lastX, lastY As Integer
	currentX = timeDateColumn
	currentY = timeFirstEntryRow
	firstX = masterValueColumn
	firstY = masterStartDateRow
	lastX = masterValueColumn
	lastY = masterStartDateRow
	
	Dim current As Date,first As Date, last As Date
	current = timeHelper.GetDate(currentX, currentY)
	Do While &quot;&quot; &lt;&gt; timeHelper.GetText(currentX, currentY)
		If (IsMissing(category)) OR (category = timeHelper.GetText(timeTypeColumn, currentY)) Then
			If (first = 0) OR (first &gt; current) Then
				first = current
				firstX = currentX
				firstY = currentY
			End If
			If (last = 0) OR (last &lt; current) Then
				last = current
				lastX = currentX
				lastY = currentY
			End If
		End If
		currentY = currentY + 1
		current = timeHelper.GetDate(currentX, currentY)
	Loop
	If first = last Then
		GetRange = timeHelper.GetText(lastX, lastY)
	Else
		GetRange = timeHelper.GetText(firstX, firstY) + &quot; - &quot; + timeHelper.GetText(lastX, lastY)
	End If
End Function

Sub WriteSummary
	calcHelper.SetText(0, 0, masterData.customerName)
	calcHelper.SetText(0, 1, masterData.customerCompany)
	calcHelper.SetText(0, 2, masterData.customerEmail)
	&apos;header
	calcHelper.SetRangeText(&quot;A6&quot;, masterData.customerCompany + &quot; | Abrechnung &quot; + masterData.calculationTitle)
	calcHelper.SetRangeText(&quot;A7&quot;, &quot;Datum: &quot; + masterData.calculationDate)
	&apos;time sum
	If config.ShowTimeSum Then
		calcHelper.SetFormula(calcTimeColumn, currentTargetRow, &quot;=SUM(D&quot;+(calcStartRow+1)+&quot;:D&quot;+(currentTargetRow)+&quot;)&quot;)
		calcHelper.SetFormatTime(calcTimeColumn, currentTargetRow)
	End If
	&apos;cost sum
	If config.ShowCostSum Then
		calcHelper.SetFormula(calcCostColumn, currentTargetRow, &quot;=SUM(E&quot;+(calcStartRow+1)+&quot;:E&quot;+(currentTargetRow)+&quot;)&quot;)
		calcHelper.SetFormatMoney(calcCostColumn, currentTargetRow)
	End If
End Sub

</script:module>