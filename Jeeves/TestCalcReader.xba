<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TestCalcReader" script:language="StarBasic">REM  *****  BASIC  *****
Option Compatible
Option ClassModule
Option Explicit

Private targetRow as Integer
Private testsSucceeded as Integer
Private failMessage as String
Private failInfo as String
Private helper as Object

Public TestName as String

&apos;CONSTRUCTOR
Public Sub Class_Initialize
	testsSucceeded = 0
	failInfo = &quot;&quot;
	failMessage = &quot;&quot;
End Sub

Public Sub Init(row as Integer)
	targetRow = row
	TestName = ReadTestName(targetRow)
End Sub

Private Sub Success
	testsSucceeded = testsSucceeded + 1
End Sub

Private Sub Fail(info, msg as String)
	failInfo = info
	failMessage = msg
End Sub

Public Function HasFailed as Boolean
	HasFailed = failInfo &lt;&gt; &quot;&quot; OR failMessage &lt;&gt; &quot;&quot;
End Function

Private Sub WriteResult
	WriteTestResult(targetRow, testsSucceeded, failInfo, failMessage)
End Sub

Sub AssertText(info, expected, actual as String)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertNumber(info as String, expected, actual as Integer)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertBool(info as String, expected, actual as Boolean)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertDate(info as String, expected, actual as Date)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

Sub AssertMoney(info as String, expected, actual as Currency)
	If Not HasFailed Then
		Success()
		If expected &lt;&gt; actual Then
			Fail(info, &quot;&quot;+expected &amp; &quot; != &quot; &amp; actual)
		End If
	End If
End Sub

&apos;Implement RunTests, but drop everything below this line

Public Const testBasePath = &quot;/home/ledovy/git/jeeves/&quot;
Public Const testFile = &quot;abrechnung-calc.ods&quot;
Public Const testOriginal = testBasePath+&quot;integration-test/vorlage/&quot;+testFile
Public Const testDoc = testBasePath+&quot;integration-test/abrechnung-calc-reader.ods&quot;

Public reader as Object
Public data As Object

Sub RunTests(cellHelper as Object)
	PrepareTest()
	
	reader = new CalcReader
	reader.Init(data)
	reader.ReadCalculation()
	
	AssertModel()
	
	WriteResult()
	data.CloseDocs()
End Sub

Sub PrepareTest
	If FileExists(testDoc) Then 
		Kill(testDoc)
	End If
	FileCopy(testOriginal, testDoc)
	ReloadDataProvider(testDoc)
End Sub

Sub ReloadDataProvider(file as String)
	data = new ClassDataProvider
	data.InitTest(LoadDocument(file), file, &quot;&quot;)&apos;testDocAccounting)
End Sub

Sub AssertModel
	Dim m as Object
	m = reader.model
	
	Dim t as Date
	t = Date()
	AssertText(&quot;Data.customerName&quot;, &quot;Mikis Hofer&quot;, m.Data.customerName)
	AssertText(&quot;Data.customerCompany&quot;, &quot;Ledovy Inc&quot;, m.Data.customerCompany)
	AssertText(&quot;Data.customerEmail&quot;, &quot;mikis@ledovy.ch&quot;, m.Data.customerEmail)
	AssertText(&quot;Data.calculationTitle&quot;, &quot;Jeeves&quot;, m.Data.calculationTitle)
	AssertText(&quot;Data.accountingTitle&quot;, &quot;Coding&quot;, m.Data.accountingTitle)
	AssertText(&quot;Data.startDate&quot;, &quot;06.01.2021&quot;, m.Data.startDate)
	&apos;AssertText(&quot;Data.calculationDate&quot;, t, m.Data.calculationDate)
	AssertDate(&quot;Data.calculationDateValue&quot;, t, m.Data.calculationDateValue)
	AssertText(&quot;Data.calculationYear&quot;, &quot;&quot;+YEAR(t), m.Data.calculationYear)
	AssertText(&quot;Data.fileName&quot;, &quot;file://&quot;+testDoc, m.Data.fileName)
	
	AssertNumber(&quot;nr of entries: &quot;+m.EntriesSize, 6, m.EntriesSize)
	AssertNumber(&quot;nr of types: &quot;+m.CategoriesSize, 4, m.CategoriesSize)
	AssertNumber(&quot;nr of grouped: &quot;+m.GroupedSize, 2, m.GroupedSize)
	
	AssertEntry(m.Entries(0), &quot;24.01.2021&quot;, &quot;Coden&quot;, &quot;SFr. 50.00 / 60 Min.&quot;, 675, 562.5)
	AssertEntry(m.Entries(1), &quot;11.01.2021&quot;, &quot;single default&quot;, &quot;SFr. 50.00 / 60 Min.&quot;, 120, 100)
	AssertEntry(m.Entries(2), &quot;12.01.2021&quot;, &quot;single custom&quot;, &quot;SFr. 60.00 / 60 Min.&quot;, 120, 120)
	AssertEntry(m.Entries(3), &quot;13.01.2021&quot;, &quot;single override&quot;, &quot;SFr. 70.00 / 60 Min.&quot;, 120, 140)
	AssertEntry(m.Entries(4), &quot;15.01.2021 - 17.01.2021&quot;, &quot;Facebook&quot;, &quot;SFr. 60.00 / 60 Min.&quot;, 240, 240)
	AssertEntry(m.Entries(5), &quot;14.01.2021 - 16.01.2021&quot;, &quot;Standardschreiben&quot;, &quot;SFr. 50.00 / 60 Min.&quot;, 240, 200)
	
	AssertCategory(m.Categories(0), &quot;Inserat&quot;, False, &quot;12.01.2021&quot;, &quot;12.01.2021&quot;, 60, 60, 120, 120)
	AssertCategory(m.Categories(1), &quot;Facebook&quot;, True, &quot;15.01.2021&quot;, &quot;17.01.2021&quot;, 60, 60, 240, 240)
	AssertCategory(m.Categories(2), &quot;Standardschreiben&quot;, True, &quot;14.01.2021&quot;, &quot;16.01.2021&quot;, 60, 50, 240, 200)
	AssertCategory(m.Categories(3), &quot;Varia&quot;, False, &quot;11.01.2021&quot;, &quot;24.01.2021&quot;, 60, 50, 915, 802.5)
End Sub

Sub AssertCategory(cat as Object, title as String, grouped as Boolean, min, max as String, factorEffort as Integer, factorCost as Currency, effort as Integer, cost as Currency)
	If Not HasFailed Then
		AssertText(&quot;cat[&quot;+title+&quot;].title&quot;, title, cat.title)
		AssertBool(&quot;cat[&quot;+title+&quot;].grouped&quot;, grouped, cat.grouped)
		AssertText(&quot;cat[&quot;+title+&quot;].min&quot;, min, cat.minText)
		AssertText(&quot;cat[&quot;+title+&quot;].max&quot;, max, cat.maxText)
		AssertNumber(&quot;cat[&quot;+title+&quot;].factorEffort&quot;, factorEffort, cat.factorEffort)
		AssertMoney(&quot;cat[&quot;+title+&quot;].factorCost&quot;, factorCost, cat.factorCost)
		AssertNumber(&quot;cat[&quot;+title+&quot;].effort&quot;, effort, cat.effort)
		AssertMoney(&quot;cat[&quot;+title+&quot;].cost&quot;, cost, cat.cost)
	End If
End Sub

Sub AssertEntry(entry as Object, datum, title, factor As String, time As Date, cost As Currency)
	If Not HasFailed Then
		AssertText(&quot;entry.datum&quot;, datum, entry.datum)
		AssertText(&quot;entry.title&quot;, title, entry.title)
		AssertText(&quot;entry.factor&quot;, factor, entry.factor)
		AssertDate(&quot;entry.time&quot;, time, entry.time)
		AssertMoney(&quot;entry.cost&quot;, cost, entry.cost)
	End If
End Sub
</script:module>