<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Abrechnung" script:language="StarBasic">REM  *****  BASIC  *****

Public Const timeSheetTitle = &quot;Zeiterfassung&quot;
Public Const timeDateColumn = 0
Public Const timeTimeColumn = 1
Public Const timeTypeColumn = 2
Public Const timeNameColumn = 3
Public Const timeMaxTimeColumn = 4
Public Const timeMaxCostColumn = 5
Public Const timeCollapsedColumn = 6
Public Const timeCostColumn = 7
Public Const timeTimeRoundedColumn = 8
Public Const timeTimeFormattedColumn = 9
Public Const timeCostRoundedColumn = 10
Public Const timeFactorCostColumn = 11
Public Const timeFactorTimeColumn  = 12
Public Const timeFirstEntryRow = 11

Public Const timeMaxEntries = 300

Public Const typeSheetTitle = &quot;Arbeitstypen&quot;

Public Const calcSheetTitle = &quot;Abrechnung&quot;
Public Const calcDateColumn = 0
Public Const calcNameColumn = 1
Public Const calcFactorColumn = 2
Public Const calcTimeColumn = 3
Public Const calcCostColumn = 4
Public Const calcStartRow = 8

Public Const configSheetTitle = &quot;Konfiguration&quot;

Public Const accSheetTitle = &quot;Kontaktdaten&quot;
Public Const accCustomerColumn = 0
Public Const accTitleColumn = 1
Public Const accTimeColumn = 2
Public Const accCostColumn = 3
Public Const accFileColumn = 4
Public Const accStartRow = 3

Dim calcDoc, accDoc As Object
Dim currentTargetRow As Integer

Dim config As New ClassConfig
Dim masterData As New ClassMasterData
Dim contactData As Object
Dim types As New ClassWorkTypes
	
Sub Main
	Init()
	ProcessEntries()
	AddCollapsedEntries()
	SortWrittenEntries()
	WriteSummary()
	UpdateAccounting()
End Sub

Sub Init
	calcDoc = ThisComponent
	SetDocument(calcDoc)
	ShowGreetings()
	
	ClearOldEntries()
End Sub

Sub ClearOldEntries
	Dim endRow, rows As Integer
	
	endRow = FindRow(calcSheetTitle, calcFactorColumn, calcStartRow, &quot;Total: &quot;, True)
	rows = endRow-calcStartRow
	If rows &gt; 0 Then
		RemoveRows(calcSheetTitle, calcStartRow, rows)
	End If
End Sub

Sub ProcessEntries
	currentTargetRow = calcStartRow
	Dim i As Integer
	i = timeFirstEntryRow
	Dim rowValue As String
	rowValue = GetText(timeSheetTitle, timeDateColumn, i)
	Do While (&quot;&quot; &lt;&gt; rowValue) OR (i &lt; (timeFirstEntryRow+timeMaxEntries))
		Dim typeValue, collapsedValue, sumValue As String
		typeValue = GetText(timeSheetTitle, timeTypeColumn, i)
		If types.IsCollapsed(typeValue) Then
			sumValue = GetText(timeSheetTitle, timeTimeColumn, i)
		Else
			sumValue = GetText(timeSheetTitle, timeTimeRoundedColumn, i)
			AddRow(GetWorkEntry(i))
		End If
		types.AddEffort(sumValue, typeValue)
		&apos; increment
		i = i+1
		rowValue = GetText(timeSheetTitle, timeDateColumn, i)
	Loop
	If (i &gt; (timeFirstEntryRow+timeMaxEntries)) Then
		MsgBox &quot;Maximale Anzahl von &quot;+timeMaxEntries+&quot; Zeilen überschritten: &quot;+(i-timeFirstEntryRow)
	End If
End Sub

Function GetWorkEntry(row As Integer)
	Dim entry As New ClassWorkEntry
	entry.Init(row)
	GetWorkEntry = entry
End Function

Sub AddRow(entry As Object)
	If (entry.datum &lt;&gt; &quot;&quot;) OR (entry.title &lt;&gt; &quot;&quot;) OR (entry.time &lt;&gt; 0) OR (entry.cost &lt;&gt; 0) Then
		&apos;TODO Util.InsertRow
		GetSheet(calcSheetTitle).Rows.insertByIndex(currentTargetRow, 1)
		GetSheet(calcSheetTitle).Rows(currentTargetRow).clearContents(32)
		WriteRow(currentTargetRow, entry.datum, entry.title, entry.factor, entry.time, entry.cost)
		currentTargetRow = currentTargetRow + 1
	End If
End Sub

Sub WriteRow (rowIndex As Integer, dateValue As String, nameValue As String, factorValue As String, timeValue As Integer, costValue As Currency)
		SetText(calcSheetTitle, calcDateColumn, rowIndex, dateValue)
		SetText(calcSheetTitle, calcNameColumn, rowIndex, nameValue)
		SetText(calcSheetTitle, calcFactorColumn, rowIndex, factorValue)
		SetFormula(calcSheetTitle, calcTimeColumn, rowIndex, &quot;=&quot;+timeValue+&quot;/(60*24)&quot;)
		SetFormat(calcSheetTitle, calcTimeColumn, rowIndex, TimeFormat)
		SetMoney(calcSheetTitle, calcCostColumn, rowIndex, costValue)
		SetFormat(calcSheetTitle, calcCostColumn, rowIndex, CurrencyFormat)
End Sub

Sub AddCollapsedEntries
	Dim i As Integer
	For i = 0 To types.TypesSize
		Dim typeValue As String
		typeValue = types.Types(i)
		If types.IsCollapsed(typeValue) Then
			Dim entry As Object
			entry = types.GetWorkEntry(typeValue)
			entry.datum = GetRange(typeValue)
			If entry.cost &lt;&gt; 0 Then
				AddRow(entry)
			End If
		End If
	Next i
End Sub

Sub SortWrittenEntries
	Dim range As Object
	range = GetRangeByIndex(calcSheetTitle, calcDateColumn, calcStartRow, calcCostColumn, currentTargetRow)
    SortRange(0, range)
End Sub

Sub WriteSummary
	SetText(calcSheetTitle, 0, 0, masterData.customerName)
	SetText(calcSheetTitle, 0, 1, masterData.customerCompany)
	SetText(calcSheetTitle, 0, 2, masterData.customerEmail)
	&apos;header
	SetRangeText(calcSheetTitle, &quot;A6&quot;, masterData.customerCompany + &quot; | Abrechnung &quot; + masterData.calculationTitle)
	SetRangeText(calcSheetTitle, &quot;A7&quot;, &quot;Datum: &quot; + masterData.calculationDate)
	&apos;time sum
	If config.ShowTimeSum Then
		SetFormula(calcSheetTitle, calcTimeColumn, currentTargetRow, &quot;=SUM(D&quot;+(calcStartRow+1)+&quot;:D&quot;+(currentTargetRow)+&quot;)&quot;)
		SetFormat(calcSheetTitle, calcTimeColumn, currentTargetRow, TimeFormat)
	End If
	&apos;cost sum
	If config.ShowCostSum Then
		SetFormula(calcSheetTitle, calcCostColumn, currentTargetRow, &quot;=SUM(E&quot;+(calcStartRow+1)+&quot;:E&quot;+(currentTargetRow)+&quot;)&quot;)
		SetFormat(calcSheetTitle, calcCostColumn, currentTargetRow, CurrencyFormat)
	End If
End Sub

Function GetRange(Optional category As String) As String
	Dim currentX, currentY, firstX, firstY, lastX, lastY As Integer
	currentX = timeDateColumn
	currentY = timeFirstEntryRow
	firstX = masterData.valueColumn
	firstY = masterData.startDateRow
	lastX = masterData.valueColumn
	lastY = masterData.startDateRow
	
	Dim current As Date,first As Date, last As Date
	current = GetDate(timeSheetTitle, currentX, currentY)
	Do While &quot;&quot; &lt;&gt; GetText(timeSheetTitle, currentX, currentY)
		If (IsMissing(category)) OR (category = GetText(timeSheetTitle, timeTypeColumn, currentY)) Then
			If (first = 0) OR (first &gt; current) Then
				first = current
				firstX = currentX
				firstY = currentY
			End If
			If (last = 0) OR (last &lt; current) Then
				last = current
				lastX = currentX
				lastY = currentY
			End If
		End If
		currentY = currentY + 1
		current = GetDate(timeSheetTitle, currentX, currentY)
	Loop
	If first = last Then
		GetRange = GetText(timeSheetTitle, lastX, lastY)
	Else
		GetRange = GetText(timeSheetTitle, firstX, firstY) + &quot; - &quot; + GetText(timeSheetTitle, lastX, lastY)
	End If
End Function

Sub UpdateAccounting
	Dim path, year As String
	Dim url, accSheet As Object
	path = config.PathAccounting
		
	If FileExists(path) Then
	    url = convertToURL(path)
	    accDoc = StarDesktop.loadComponentFromURL(url, &quot;_blank&quot;, 0, Array())

	    SetDocument(accDoc)
	    contactData = New ClassContact
		contactData.Init()&apos;accDoc.Sheets.getByName(accSheetTitle))
		If accDoc.Sheets.hasByName(masterData.calculationYear) Then
		   accSheet = accDoc.Sheets.getByName(masterData.calculationYear)
		Else
		   accSheet = CreateAccountingSheet(accDoc)
		End If

		SetDocument(calcDoc)
		WriteCalculationContact

		SetDocument(accDoc)
		WriteCalculationToAccounting(masterData.calculationYear)
		accDoc.store()
	    accDoc.Close(True)
	    SetDocument(calcDoc)
	Else
		MsgBox &quot;Konfiguration -&gt; &apos;Pfad Buchhaltung&apos; nicht gefunden:&quot;+ chr(13) + path
	End If
End Sub

Function CreateAccountingSheet(doc as Object) as Object
	Dim sheet As Object
	Dim sheetYear As String
	sheetYear = masterData.calculationYear
	doc.Sheets.copyByName(&quot;Vorlage&quot;, sheetYear, 0)
	sheet = doc.Sheets.getByName(sheetYear)
	sheet.getCellRangeByName(&quot;A1&quot;).String = contactData.contactFirstName+&quot; &quot;+contactData.contactLastName+&quot; – Auflistung Abrechnungen &quot;+sheetYear
	CreateAccountingSheet = sheet
End Function

Sub WriteCalculationContact
	SetRangeText(calcSheetTitle, &quot;A5&quot;,  contactData.contactFirstName+&quot; &quot;+contactData.contactLastName)
	SetText(calcSheetTitle, 0, currentTargetRow+3, &quot;PC: &quot;+contactData.bankPc)
	SetText(calcSheetTitle, 0, currentTargetRow+4, &quot;IBAN: &quot;+contactData.bankIban)
	SetText(calcSheetTitle, 0, currentTargetRow+5, &quot;Kontoinhaberin: &quot;+contactData.contactFirstName+&quot; &quot;+contactData.contactLastName+&quot;; &quot;+contactData.contactAddress)
	SetText(calcSheetTitle, 0, currentTargetRow+8, contactData.contactFirstName)
End Sub

Sub WriteCalculationToAccounting(sheet as String)
	Dim company As String
	company = masterData.customerCompany
	Dim currentRow, customerRow, entryRow, lastRow As Integer
	&apos;loop to find customer
	customerRow = FindRow(sheet, accCustomerColumn, accStartRow, company, True)
	lastRow = FindRow(sheet, accCustomerColumn, accStartRow, &quot;Total&quot;, True)
	&apos;if customer does not exist, create a new title
	If customerRow &lt; 0 Then
		Dim spacing As Integer
		spacing = 2
		customerRow = lastRow-1
		GetSheet(sheet).Rows.insertByIndex(customerRow-1, spacing)
		GetSheet(sheet).getCellByPosition(accCustomerColumn, customerRow).String = company
		lastRow = lastRow+spacing
	End If
	&apos;load entry-data
	Dim title As String
	title = masterData.accountingTitle
	Dim time As Date
	time = masterData.calculationDateValue
	Dim cost As Currency
	cost = calcDoc.Sheets.getByName(calcSheetTitle).getCellByPosition(calcCostColumn, currentTargetRow).Value
	&apos;find entry-row (update existing or insert new line)
	Dim msg as String
	entryRow = -1
	currentRow = customerRow+1
	Do While &quot;&quot; &lt;&gt; GetSheet(sheet).getCellByPosition(accTitleColumn, currentRow).String
		If masterData.fileName = GetSheet(sheet).getCellByPosition(accFileColumn, currentRow).String Then
			entryRow = currentRow
		End If
		currentRow = currentRow+1
	Loop
	If entryRow &lt; 0 Then
		entryRow = currentRow
		GetSheet(sheet).Rows.insertByIndex(currentRow, 1)
		currentRow = currentRow+1
		lastRow = lastRow+1
		msg = &quot;Eintrag zur Buchhaltung hinzugefügt&quot;
	Else
		msg = &quot;Eintrag in Buchhaltung aktualisiert&quot;
	End If
	&apos;write entry for calculation
	GetSheet(sheet).getCellByPosition(accTitleColumn, entryRow).String = title
	GetSheet(sheet).getCellByPosition(accTimeColumn, entryRow).Value = time
	GetSheet(sheet).getCellByPosition(accCostColumn, entryRow).Value = cost
	GetSheet(sheet).getCellByPosition(accFileColumn, entryRow).String = masterData.fileName
	&apos;sort entries
	Dim range As Object
	range = GetSheet(sheet).getCellRangeByPosition(accCustomerColumn, customerRow+1, accCostColumn, currentRow-1)
    SortRange(accTimeColumn, range)
	&apos;rewrite total
	GetSheet(sheet).getCellByPosition(accCostColumn, lastRow).Formula = &quot;=SUM(D&quot;+(accStartRow+1)+&quot;:D&quot;+(lastRow)+&quot;)&quot;
	MsgBox msg
End Sub

Sub ShowGreetings
	&apos;EasterEgg
	Dim t as Date
	t = Now()
	If MONTH(t)=10 AND DAY(t)=29 Then
		MsgBox &quot;Herzlichen Glückwunsch zum Geburtstag!&quot;
	End If
End Sub

</script:module>