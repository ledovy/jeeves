<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Abrechnung" script:language="StarBasic">REM  *****  BASIC  *****

&apos;Dim calcDoc, accDoc As Object
Dim timeHelper, typeHelper, calcHelper, configHelper, accHelper as Object
Dim currentTargetRow As Integer

Dim config, masterData, contactData, types As Object
	
Sub Main
	Init()
	ProcessEntries()
	AddCollapsedEntries()
	WriteSummary()
	UpdateAccounting()
End Sub

Sub Init
	timeHelper = SheetHelper(timeSheetTitle)
	typeHelper = SheetHelper(typeSheetTitle)
	calcHelper = SheetHelper(calcSheetTitle)
	configHelper = SheetHelper(configSheetTitle)
	ShowGreetings()
	
	config = New ClassConfig
	config.Init(configHelper)
	masterData = New ClassMasterData
	masterData.Init(timeHelper, ThisComponent.getLocation())
	types = New ClassWorkTypes
	types.Init(typeHelper)
	
	ClearOldEntries()
End Sub

Sub ClearOldEntries
	Dim endRow, rows As Integer
	
	endRow = calcHelper.FindRow(calcFactorColumn, calcStartRow, &quot;Total: &quot;, True)
	rows = endRow-calcStartRow
	If rows &gt; 0 Then
		calcHelper.RemoveRows(calcStartRow, rows)
	End If
End Sub

Sub ProcessEntries
	currentTargetRow = calcStartRow
	Dim i As Integer
	i = timeFirstEntryRow
	Dim rowValue As String
	rowValue = timeHelper.GetText(timeDateColumn, i)
	Do While (&quot;&quot; &lt;&gt; rowValue) OR (i &lt; (timeFirstEntryRow+timeMaxEntries))
		Dim typeValue, collapsedValue, sumValue As String
		typeValue = timeHelper.GetText(timeTypeColumn, i)
		If types.IsCollapsed(typeValue) Then
			sumValue = timeHelper.GetText(timeTimeColumn, i)
		Else
			sumValue = timeHelper.GetText(timeTimeRoundedColumn, i)
			AddRow(GetWorkEntry(i))
		End If
		types.AddEffort(sumValue, typeValue)
		&apos; increment
		i = i+1
		rowValue = timeHelper.GetText(timeDateColumn, i)
	Loop
	If (i &gt; (timeFirstEntryRow+timeMaxEntries)) Then
		MsgBox &quot;Maximale Anzahl von &quot;+timeMaxEntries+&quot; Zeilen überschritten: &quot;+(i-timeFirstEntryRow)
	End If
End Sub

Function GetWorkEntry(row As Integer)
	Dim entry As New ClassWorkEntry
	&apos;entry.Init(row)
	entry.datum = timeHelper.GetText(timeDateColumn, row)
	entry.factor = timeHelper.GetText(timeFactorCostColumn, row) + &quot; / &quot; + timeHelper.GetText(timeFactorTimeColumn, row) + &quot; Min.&quot;
	entry.time = timeHelper.GetDate(timeTimeRoundedColumn, row)
	entry.cost = timeHelper.GetMoney(timeCostRoundedColumn, row)
	entry.title = timeHelper.GetText(timeNameColumn, row)
	GetWorkEntry = entry
End Function

Sub AddRow(entry As Object)
	If (entry.datum &lt;&gt; &quot;&quot;) OR (entry.title &lt;&gt; &quot;&quot;) OR (entry.time &lt;&gt; 0) OR (entry.cost &lt;&gt; 0) Then
		calcHelper.InsertRows(currentTargetRow, 1)
		WriteRow(currentTargetRow, entry)
		currentTargetRow = currentTargetRow + 1
	End If
End Sub

Sub WriteRow (rowIndex As Integer, entry as Object)
		calcHelper.SetText(calcDateColumn, rowIndex, entry.datum)
		calcHelper.SetText(calcNameColumn, rowIndex, entry.title)
		calcHelper.SetText(calcFactorColumn, rowIndex, entry.factor)
		Dim timeValue as Integer
		timeValue = entry.time
		calcHelper.SetFormula(calcTimeColumn, rowIndex, &quot;=&quot;+timeValue+&quot;/(60*24)&quot;)
		calcHelper.SetFormatTime(calcTimeColumn, rowIndex)
		calcHelper.SetMoney(calcCostColumn, rowIndex, entry.cost)
		calcHelper.SetFormatMoney(calcCostColumn, rowIndex)
End Sub

Sub AddCollapsedEntries
	Dim i As Integer
	For i = 0 To types.TypesSize
		Dim typeValue As String
		typeValue = types.Types(i)
		If types.IsCollapsed(typeValue) Then
			Dim entry As Object
			entry = types.GetWorkEntry(typeValue)
			entry.datum = GetRange(typeValue)
			If entry.cost &lt;&gt; 0 Then
				AddRow(entry)
			End If
		End If
	Next i
	calcHelper.SortRange(calcDateColumn, calcDateColumn, calcStartRow, calcCostColumn, currentTargetRow)
End Sub

Sub WriteSummary
	calcHelper.SetText(0, 0, masterData.customerName)
	calcHelper.SetText(0, 1, masterData.customerCompany)
	calcHelper.SetText(0, 2, masterData.customerEmail)
	&apos;header
	calcHelper.SetRangeText(&quot;A6&quot;, masterData.customerCompany + &quot; | Abrechnung &quot; + masterData.calculationTitle)
	calcHelper.SetRangeText(&quot;A7&quot;, &quot;Datum: &quot; + masterData.calculationDate)
	&apos;time sum
	If config.ShowTimeSum Then
		calcHelper.SetFormula(calcTimeColumn, currentTargetRow, &quot;=SUM(D&quot;+(calcStartRow+1)+&quot;:D&quot;+(currentTargetRow)+&quot;)&quot;)
		calcHelper.SetFormatTime(calcTimeColumn, currentTargetRow)
	End If
	&apos;cost sum
	If config.ShowCostSum Then
		calcHelper.SetFormula(calcCostColumn, currentTargetRow, &quot;=SUM(E&quot;+(calcStartRow+1)+&quot;:E&quot;+(currentTargetRow)+&quot;)&quot;)
		calcHelper.SetFormatMoney(calcCostColumn, currentTargetRow)
	End If
End Sub

Function GetRange(Optional category As String) As String
	Dim currentX, currentY, firstX, firstY, lastX, lastY As Integer
	currentX = timeDateColumn
	currentY = timeFirstEntryRow
	firstX = masterValueColumn
	firstY = masterStartDateRow
	lastX = masterValueColumn
	lastY = masterStartDateRow
	
	Dim current As Date,first As Date, last As Date
	current = timeHelper.GetDate(currentX, currentY)
	Do While &quot;&quot; &lt;&gt; timeHelper.GetText(currentX, currentY)
		If (IsMissing(category)) OR (category = timeHelper.GetText(timeTypeColumn, currentY)) Then
			If (first = 0) OR (first &gt; current) Then
				first = current
				firstX = currentX
				firstY = currentY
			End If
			If (last = 0) OR (last &lt; current) Then
				last = current
				lastX = currentX
				lastY = currentY
			End If
		End If
		currentY = currentY + 1
		current = timeHelper.GetDate(currentX, currentY)
	Loop
	If first = last Then
		GetRange = timeHelper.GetText(lastX, lastY)
	Else
		GetRange = timeHelper.GetText(firstX, firstY) + &quot; - &quot; + timeHelper.GetText(lastX, lastY)
	End If
End Function

Sub UpdateAccounting
	Dim path, sheetName As String
	Dim url, doc, contactHelper As Object
	path = config.PathAccounting
	sheetName = masterData.calculationYear
		
	If FileExists(path) Then
	    url = convertToURL(path)
	    doc = StarDesktop.loadComponentFromURL(url, &quot;_blank&quot;, 0, Array())

		contactHelper = DocHelper(doc, accSheetTitle)
	    contactData = New ClassContact
	    contactData.Init(contactHelper)
	    
		If doc.Sheets.hasByName(sheetName) Then
			accHelper = DocHelper(doc, sheetName)
		Else
			doc.Sheets.copyByName(&quot;Vorlage&quot;, sheetName, 0)
			accHelper = DocHelper(doc, sheetName)
			accHelper.SetRangeText(&quot;A1&quot;, contactData.contactFirstName+&quot; &quot;+contactData.contactLastName+&quot; – Auflistung Abrechnungen &quot;+sheetName)
		End If

		WriteCalculationContact

		WriteCalculationToAccounting(sheetName)
		doc.store()
	    doc.Close(True)
	Else
		MsgBox &quot;Konfiguration -&gt; &apos;Pfad Buchhaltung&apos; nicht gefunden:&quot;+ chr(13) + path
	End If
End Sub

Sub WriteCalculationContact
	calcHelper.SetRangeText(&quot;A5&quot;,  contactData.contactFirstName+&quot; &quot;+contactData.contactLastName)
	calcHelper.SetText(0, currentTargetRow+3, &quot;PC: &quot;+contactData.bankPc)
	calcHelper.SetText(0, currentTargetRow+4, &quot;IBAN: &quot;+contactData.bankIban)
	calcHelper.SetText(0, currentTargetRow+5, &quot;Kontoinhaberin: &quot;+contactData.contactFirstName+&quot; &quot;+contactData.contactLastName+&quot;; &quot;+contactData.contactAddress)
	calcHelper.SetText(0, currentTargetRow+8, contactData.contactFirstName)
End Sub

Sub WriteCalculationToAccounting(sheet as String)
	Dim company As String
	company = masterData.customerCompany
	Dim currentRow, customerRow, entryRow, lastRow As Integer
	&apos;loop to find customer
	customerRow = accHelper.FindRow(accCustomerColumn, accStartRow, company, True)
	lastRow = accHelper.FindRow(accCustomerColumn, accStartRow, &quot;Total&quot;, True)
	&apos;if customer does not exist, create a new title
	If customerRow &lt; 0 Then
		Dim spacing As Integer
		spacing = 2
		customerRow = lastRow-1
		accHelper.InsertRows(customerRow-1, spacing)
		accHelper.SetText(accCustomerColumn, customerRow, company)
		lastRow = lastRow+spacing
	End If
	&apos;load entry-data
	Dim title As String
	title = masterData.accountingTitle
	Dim time As Date
	time = masterData.calculationDateValue
	Dim cost As Currency
	cost = calcHelper.GetMoney(calcCostColumn, currentTargetRow)
	&apos;find entry-row (update existing or insert new line)
	Dim msg as String
	entryRow = -1
	currentRow = customerRow+1
	&apos;TODO HasValue(cell, value)
	Do While &quot;&quot; &lt;&gt; accHelper.GetText(accTitleColumn, currentRow)
		If masterData.fileName = accHelper.GetText(accFileColumn, currentRow) Then
			entryRow = currentRow
		End If
		currentRow = currentRow+1
	Loop
	If entryRow &lt; 0 Then
		entryRow = currentRow
		accHelper.InsertRows(currentRow, 1)
		currentRow = currentRow+1
		lastRow = lastRow+1
		msg = &quot;Eintrag zur Buchhaltung hinzugefügt&quot;
	Else
		msg = &quot;Eintrag in Buchhaltung aktualisiert&quot;
	End If
	&apos;write entry for calculation
	accHelper.SetText(accTitleColumn, entryRow, title)
	accHelper.SetDate(accTimeColumn, entryRow, time)
	accHelper.SetMoney(accCostColumn, entryRow, cost)
	accHelper.SetText(accFileColumn, entryRow, masterData.fileName)
	&apos;sort entries
    accHelper.SortRange(accTimeColumn, accCustomerColumn, customerRow+1, accCostColumn, currentRow-1)
	&apos;rewrite total
	accHelper.SetFormula(accCostColumn, lastRow, &quot;=SUM(D&quot;+(accStartRow+1)+&quot;:D&quot;+(lastRow)+&quot;)&quot;)
	MsgBox msg
End Sub

Sub ShowGreetings
	&apos;EasterEgg
	Dim t as Date
	t = Now()
	If MONTH(t)=10 AND DAY(t)=29 Then
		MsgBox &quot;Herzlichen Glückwunsch zum Geburtstag!&quot;
	End If
End Sub

</script:module>