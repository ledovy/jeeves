<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="JeevesApp" script:language="StarBasic">REM  *****  BASIC  *****

Public calculation as Object
Public accounting as Object
Public dataProvider As Object
&apos;Public data As Object
&apos;Dim model as Object
&apos;Dim reader as Object
&apos;Dim calcWriter as Object
&apos;Dim accWriter as Object


Sub ReloadDataProvider
	&apos;TODO: replace ClassDataProvider with JeevesData
	dataProvider = new ClassDataProvider
	dataProvider.Init(ThisComponent)
	&apos;data = new JeevesData
	&apos;data.OpenCalcSheet()
	&apos;reader = new CalcReader
	&apos;reader.Init(data)
	&apos;calcWriter = new CalcWriter
	&apos;calcWriter.Init(data)
End Sub

&apos; timeSheet: Zeiterfassung

Sub ResetTimeAllTimeRows
	&apos;BUTTON: clear Arbeitszeiten
	If Info(&quot;Wirklich alle erfassten Arbeitszeiten löschen?&quot;, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION,&quot;Arbeitszeiten löschen&quot;) = IDYES Then
		ReloadDataProvider()
		Dim resetter as new ClassTimeReset
		resetter.Init(dataProvider)
		resetter.ResetTimeValues(timeFirstEntryRow, timeMaxEntries)
	End If
End Sub

Sub ResetTimeAllMaxRows
	&apos;BUTTON: clear Kostendach
	If Info(&quot;Wirklich alle Kostendächer zurücksetzen?&quot;, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION,&quot;Kostendächer zurücksetzen&quot;) = IDYES Then
		ReloadDataProvider()
		Dim resetter as new ClassTimeReset
		resetter.Init(dataProvider)
		resetter.ResetMaxCostValues(timeFirstEntryRow, timeMaxEntries)
	End If
End Sub

Sub ResetTimeAllFactorRows
	&apos;BUTTON: clear Stundensatz
	If Info(&quot;Wirklich alle Stundensätze zurücksetzen?&quot;, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION,&quot;Stundensätze zurücksetzen&quot;) = IDYES Then
		ReloadDataProvider()
		Dim resetter as new ClassTimeReset
		resetter.Init(dataProvider)
		resetter.ResetCostFactorValues(timeFirstEntryRow, timeMaxEntries)
	End If
End Sub

Sub ResetTimeAllHelpRows
	&apos;BUTTON: clear Hilfswerte
	If Info(&quot;Wirklich alle Hilfswerte wiederherstellen?&quot;, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION,&quot;Hilfswerte wiederherstellen&quot;) = IDYES Then
		ReloadDataProvider()
		Dim resetter as new ClassTimeReset
		resetter.Init(dataProvider)
		resetter.ResetHelpValues(timeFirstEntryRow, timeMaxEntries)
	End If
End Sub

Sub ResetTimeMasterData
	&apos;BUTTON: clear Stammdaten
	If Info(&quot;Wirklich alle Stammdaten löschen?&quot;, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION,&quot;Stammdaten löschen&quot;) = IDYES Then
		ReloadDataProvider()
		Dim resetter as new ClassTimeReset
		resetter.Init(dataProvider)
		resetter.ResetMasterData()
	End If
End Sub

&apos; typeSheet: Arbeitstypen

Sub AddNewWorkType
	&apos;BUTTON: Neuen Arbeitstyp erfassen
	ReloadDataProvider()
	dataProvider.LoadTypeHelper()
	WorkTypeNewRow(dataProvider)
End Sub

&apos; calcSheet: Abrechnung

Sub RunCalculationAndAccounting
	&apos;BUTTON: Rechnung neu erstellen und Buchhaltung aktualisieren
	RunCalculation()
	RunAccounting()
End Sub

Sub RunCalculation
	&apos;BUTTON: Rechnung aktualisieren
	InitCalculation()
		
	&apos;TODO: use CalcWriter
	calculation.CreateCalculation()
	&apos;calcWriter.WriteCalculation(model)
End Sub

Sub ClearCalculation
	&apos;BUTTON: Rechnung leeren
	InitCalculation()
	
	&apos;TODO: use CalcWriter
	calculation.ClearEntries()
	&apos;calcWriter.ClearEntries()
End Sub

Sub InitCalculation
	ReloadDataProvider()
	&apos;TODO: use CalcReader
	calculation = new ClassCalculation
	calculation.Init(dataProvider)
	&apos;model = reader.ReadCalculation()
End Sub

Sub RunAccounting
	&apos;Buchhaltung aktualisieren
	InitAccounting()
	
	&apos;TODO: use AccWriter
	accounting.UpdateAccounting()
End Sub

Sub InitAccounting
	ReloadDataProvider()
	
	&apos;TODO: use CalcReader
	accounting = new ClassAccounting
	accounting.Init(dataProvider)
End Sub

</script:module>